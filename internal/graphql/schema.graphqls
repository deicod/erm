scalar Time

interface Node { id: ID! }

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

directive @auth(roles: [String!]) on FIELD_DEFINITION

type Query {
  node(id: ID!): Node
  health: String!
}

type Mutation {
  _noop: Boolean
}

type Subscription {
  _noop: Boolean
}

# BEGIN GENERATED
scalar Timestamptz

type User implements Node {
  id: ID!
  createdAt: Timestamptz!
  updatedAt: Timestamptz!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateUserInput {
  clientMutationId: String
  id: ID
  createdAt: Timestamptz
  updatedAt: Timestamptz
}

type CreateUserPayload {
  clientMutationId: String
  user: User
}

input UpdateUserInput {
  clientMutationId: String
  id: ID!
  createdAt: Timestamptz
  updatedAt: Timestamptz
}

type UpdateUserPayload {
  clientMutationId: String
  user: User
}

input DeleteUserInput {
  clientMutationId: String
  id: ID!
}

type DeleteUserPayload {
  clientMutationId: String
  deletedUserID: ID!
}

extend type Query {
  user(id: ID!): User
  users(first: Int, after: String, last: Int, before: String): UserConnection!
}

extend type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!
}

extend type Subscription {
  userCreated: User!
  userUpdated: User!
  userDeleted: ID!
}

# END GENERATED
