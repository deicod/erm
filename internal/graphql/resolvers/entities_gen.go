// Code generated by erm. DO NOT EDIT.
package resolvers

import (
	"context"
	"fmt"
	"github.com/deicod/erm/internal/graphql"
	"github.com/deicod/erm/internal/graphql/dataloaders"
	"github.com/deicod/erm/internal/graphql/relay"
	"github.com/deicod/erm/internal/orm/gen"
)

func (r *queryResolver) Node(ctx context.Context, id string) (graphql.Node, error) {
	typ, nativeID, err := relay.FromGlobalID(id)
	if err != nil {
		return nil, err
	}
	switch typ {
	case "User":
		record, err := r.loadUser(ctx, nativeID)
		if err != nil {
			return nil, err
		}
		if record == nil {
			return nil, nil
		}
		return toGraphQLUser(record), nil
	default:
		return nil, fmt.Errorf("unknown node type %s", typ)
	}
}

func (r *Resolver) loadUser(ctx context.Context, id string) (*gen.User, error) {
	if r == nil || r.ORM == nil {
		return nil, nil
	}
	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.User(); loader != nil {
			return loader.Load(ctx, id)
		}
	}
	return r.ORM.Users().ByID(ctx, id)
}

func (r *Resolver) primeUser(ctx context.Context, record *gen.User) {
	if record == nil {
		return
	}
	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.User(); loader != nil {
			loader.Prime(record.ID, record)
		}
	}
}

func toGraphQLUser(record *gen.User) *graphql.User {
	if record == nil {
		return nil
	}
	return &graphql.User{
		ID:        relay.ToGlobalID("User", record.ID),
		CreatedAt: record.CreatedAt,
		UpdatedAt: record.UpdatedAt,
	}
}

func decodeUserID(id string) (string, error) {
	if id == "" {
		return "", fmt.Errorf("id is required")
	}
	typ, nativeID, err := relay.FromGlobalID(id)
	if err != nil {
		return id, nil
	}
	if typ != "User" {
		return "", fmt.Errorf("invalid id for User: %s", typ)
	}
	return nativeID, nil
}

func (r *queryResolver) User(ctx context.Context, id string) (*graphql.User, error) {
	nativeID, err := decodeUserID(id)
	if err != nil {
		return nil, err
	}
	record, err := r.loadUser(ctx, nativeID)
	if err != nil {
		return nil, err
	}
	return toGraphQLUser(record), nil
}

func (r *queryResolver) Users(ctx context.Context, first *int, after *string, last *int, before *string) (*graphql.UserConnection, error) {
	if r.ORM == nil {
		return nil, fmt.Errorf("orm client is not configured")
	}
	if last != nil || before != nil {
		return nil, fmt.Errorf("backward pagination is not supported")
	}
	limit := defaultPageSize
	if first != nil && *first > 0 {
		limit = *first
	}
	offset := 0
	if after != nil && *after != "" {
		if decoded, err := decodeCursor(*after); err == nil {
			offset = decoded + 1
		}
	}
	total, err := r.ORM.Users().Count(ctx)
	if err != nil {
		return nil, err
	}
	records, err := r.ORM.Users().List(ctx, limit, offset)
	if err != nil {
		return nil, err
	}
	edges := make([]*graphql.UserEdge, len(records))
	for idx, record := range records {
		cursor := encodeCursor(offset + idx)
		r.primeUser(ctx, record)
		edges[idx] = &graphql.UserEdge{
			Cursor: cursor,
			Node:   toGraphQLUser(record),
		}
	}
	var startCursor, endCursor *string
	if len(edges) > 0 {
		sc := edges[0].Cursor
		ec := edges[len(edges)-1].Cursor
		startCursor = &sc
		endCursor = &ec
	}
	pageInfo := &graphql.PageInfo{
		HasNextPage:     offset+len(edges) < total,
		HasPreviousPage: offset > 0,
		StartCursor:     startCursor,
		EndCursor:       endCursor,
	}
	return &graphql.UserConnection{
		Edges:      edges,
		PageInfo:   pageInfo,
		TotalCount: total,
	}, nil
}

func (r *mutationResolver) CreateUser(ctx context.Context, input graphql.CreateUserInput) (*graphql.CreateUserPayload, error) {
	if r.ORM == nil {
		return nil, fmt.Errorf("orm client is not configured")
	}
	model := new(gen.User)
	if input.ID != nil {
		model.ID = *input.ID
	}
	if input.CreatedAt != nil {
		model.CreatedAt = *input.CreatedAt
	}
	if input.UpdatedAt != nil {
		model.UpdatedAt = *input.UpdatedAt
	}
	record, err := r.ORM.Users().Create(ctx, model)
	if err != nil {
		return nil, err
	}
	r.primeUser(ctx, record)
	return &graphql.CreateUserPayload{
		ClientMutationID: input.ClientMutationID,
		User:             toGraphQLUser(record),
	}, nil
}

func (r *mutationResolver) UpdateUser(ctx context.Context, input graphql.UpdateUserInput) (*graphql.UpdateUserPayload, error) {
	if r.ORM == nil {
		return nil, fmt.Errorf("orm client is not configured")
	}
	nativeID, err := decodeUserID(input.ID)
	if err != nil {
		return nil, err
	}
	model := &gen.User{ID: nativeID}
	if input.CreatedAt != nil {
		model.CreatedAt = *input.CreatedAt
	}
	if input.UpdatedAt != nil {
		model.UpdatedAt = *input.UpdatedAt
	}
	record, err := r.ORM.Users().Update(ctx, model)
	if err != nil {
		return nil, err
	}
	r.primeUser(ctx, record)
	return &graphql.UpdateUserPayload{
		ClientMutationID: input.ClientMutationID,
		User:             toGraphQLUser(record),
	}, nil
}

func (r *mutationResolver) DeleteUser(ctx context.Context, input graphql.DeleteUserInput) (*graphql.DeleteUserPayload, error) {
	if r.ORM == nil {
		return nil, fmt.Errorf("orm client is not configured")
	}
	nativeID, err := decodeUserID(input.ID)
	if err != nil {
		return nil, err
	}
	if err := r.ORM.Users().Delete(ctx, nativeID); err != nil {
		return nil, err
	}
	return &graphql.DeleteUserPayload{
		ClientMutationID: input.ClientMutationID,
		DeletedUserID:    relay.ToGlobalID("User", nativeID),
	}, nil
}
