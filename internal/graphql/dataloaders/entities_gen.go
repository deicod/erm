// Code generated by erm. DO NOT EDIT.
package dataloaders

import (
	"context"
	"github.com/deicod/erm/internal/observability/metrics"
	"github.com/deicod/erm/internal/orm/gen"
)

func configureEntityLoaders(loaders *Loaders, orm *gen.Client, collector metrics.Collector) {
	if loaders == nil || orm == nil {
		return
	}
	loaders.register("User", newEntityLoader[string, *gen.User]("users", collector, func(ctx context.Context, keys []string) (map[string]*gen.User, error) {
		results := make(map[string]*gen.User, len(keys))
		for _, key := range keys {
			record, err := orm.Users().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
}

func (l *Loaders) User() *EntityLoader[string, *gen.User] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("User").(*EntityLoader[string, *gen.User]); ok {
		return loader
	}
	return nil
}
